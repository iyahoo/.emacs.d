(key-combo-mode t)
(global-key-combo-mode t)

(add-hook 'prolog-mode-hook
          '(lambda ()
             (key-combo-define-local (kbd ":") '(" : " " :- " ":"))))

(add-hook 'coq-mode-hook
          '(lambda ()
             (key-combo-define-local (kbd "=") '(" = " " == " " === " ))
             (key-combo-define-local (kbd "=>") " => ")
             (key-combo-define-local (kbd "-") '(" - " "-"))
             (key-combo-define-local (kbd "+") '(" + " "+"))
             (key-combo-define-local (kbd "*") '(" * " "*"))
             (key-combo-define-local (kbd ":") '(" : " " :: " "::"))
             (key-combo-define-local (kbd ">") '(" > " " -> " " => " ">"))
             (key-combo-define-local (kbd "<") '(" < " " <- " " <= " "<"))
             (key-combo-define-local (kbd ":=") " := ")
             (key-combo-define-local (kbd "<=") " <= ")
             (key-combo-define-local (kbd ".") '(". " "."))
             (key-combo-define-local (kbd ",") '(", " ","))
             (key-combo-define-local (kbd "|") '(" | " "|"))
             (key-combo-define-local (kbd "|-") " |- ")))

(add-hook 'haskell-mode-hook
          '(lambda ()
             (key-combo-define-local (kbd "=") '(" = " " == " " === " ))
             (key-combo-define-local (kbd "=>") " => ")
             (key-combo-define-local (kbd "-") '(" - " "-"))
             (key-combo-define-local (kbd "+") '(" + " "++ " " + "))
             (key-combo-define-local (kbd "*") '(" * " "*"))
             (key-combo-define-local (kbd ":") '(":" " :: " "::"))
             (key-combo-define-local (kbd ">") '(" > " " -> " " => " ">"))
             (key-combo-define-local (kbd "<") '(" < " " <- " " <= " "<"))
             (key-combo-define-local (kbd "<=") " <= ")
             (key-combo-define-local (kbd ".") '(". " "."))
             (key-combo-define-local (kbd "|") '(" | " "|"))
             (key-combo-define-local (kbd "|-") " |- ")))

(add-hook 'lisp-mode-hook
          '(lambda ()
             (key-combo-define-local (kbd "=") '("= " "="))
             (key-combo-define-local (kbd "-") '("-" "- "))
             (key-combo-define-local (kbd "+") '("+ " "+"))
             (key-combo-define-local (kbd "*") '("*" "* "))
             (key-combo-define-local (kbd ">") '("> " ">= " ">"))
             (key-combo-define-local (kbd "<") '("< " "<= " "<"))
             (key-combo-define-local (kbd ",") '("," ",@"))
             (key-combo-define-local (kbd "'") '("'" "#'"))))

(add-hook 'slime-repl-mode-hook
          '(lambda ()
             (key-combo-define-local (kbd ",") '("," ",@"))
             (key-combo-define-local (kbd "'") '("'" "#'"))))

;; (setq key-combo-common-mode-hooks
;;       '(coq-mode-hook
;;         ruby-mode-hook
;;         haskell-mode-hook
;;         inferior-haskell-mode-hook        
;;         ))

;; (setq key-combo-common-default
;;       '((","  . (", " ","))
;;         ("="  . (" = " " == " " === " "="))
;;         ("=>" . " => ")
;;         ("=~" . " =~ ")
;;         ("=*" . " =* ")
;;         ("+"  . (" + " " += " "+"))
;;         ("+=" . " += ")
;;         ("-"  . (" - " " -= " "-"))
;;         ("-=" . " -= ")
;;         ("->" . " -> ")
;;         (">"  . (" > " " => " " >= " ">"))
;;         (">=" . " >= ")
;;         ("%"  . (" % " " %= " "%"))
;;         ("%="  . " %= ")
;;         ("!" . (" != " " !~ " "!"))
;;         ("!="  . " != " )
;;         ("!~" . " !~ ")
;;         ("~" . (" =~ " "~"))
;;         ("::" . " :: ")
;;         ("&"  . (" & " " && " "&"))
;;         ("&=" . " &= ")
;;         ("&&=" . " &&= ")
;;         ("*"  . (" * " "**" "*"))
;;         ("*="  . " *= " )
;;         ("<" . (" < " " <= " "<"))
;;         ("<=" . " <= ")
;;         ("<<=" . " <<= ")
;;         ("<-" . " <- ")
;;         ("|"  . (" ||= " " || " "|"))
;;         ("|=" . " |= ")
;;         ("||=" . " ||= ")
;;         ("/" . ("/`!!'/" " / " "// "))
;;         ("/=" . " /= ")
;;         ("/*" . "/* `!!' */")
;;         ("{" . ("{`!!'}" "{"))
;;         ("{|" . "{ |`!!'|  }")
;;         ("\"" . ("\"`!!'\"" "\""))
;;         ("'" . ("'`!!''" "'"))
;;         ("(" . ("(`!!')" "("))))

;; (add-hook 'haskell-mode-hook
;;           '(lambda ()
;;              (key-combo-define-local (kbd "-") '("-" " -> " "--"))
;;              (key-combo-define-local (kbd "<") '("<" " <- " " <= " " =<< " "<<" "<"))
;;              (key-combo-define-local (kbd ">") '(">" " >= " " >>= " ">"))
;;              (key-combo-define-local (kbd "=") '("=" " = " " == " "=="))
;;              (key-combo-define-local (kbd ":") '(":" " :: " "::"))
;;              ))

;; (add-hook 'coq-mode-hook
;;           '(lambda ()
;;              (key-combo-define-local (kbd "-") '("-" " -> " "--"))
;;              (key-combo-define-local (kbd "<") '("<" " <- " " <= " " =<< " "<<" "<"))
;;              (key-combo-define-local (kbd ">") '(">" " >= " " >>= " ">"))
;;              (key-combo-define-local (kbd "=") '("=" " = " " == " "=="))
;;              (key-combo-define-local (kbd ":") '(":" " :: " "::"))
;;              ))
